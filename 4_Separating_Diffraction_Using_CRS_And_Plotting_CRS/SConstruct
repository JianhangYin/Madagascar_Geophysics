from rsf.proj import *
Program('Extract.x','Extract.c')
Program('Mcrspara.x','Mcrspara.c')
# Plot 3D traveltime
def gplot(x0):
    return '''
    transp |
    graph3 frame1=2 frame3=0 frame2=%d
    wanttitle=n wantaxis=n min=4 max=0 plotfat=3
    point1=0.8 point2=0.8 plotcol=3
    ''' % int(x0/0.025)
# Plot 3D data (midpoint indicated)
def kplot(x0):
    return '''
    byte |
    transp plane=23 memsize=1000 |
    grey3 flat=y frame1=500 frame3=0 frame2=%d
    label1=Time unit1=s 
    label3=Half-Offset unit3=km 
    label2=Midpoint unit2=km
    title=Data point1=0.8 point2=0.8 
    ''' % int(x0/0.025)
# Plot 2D traveltime
def tplot(title):
    return '''
    grey color=j bias=2 scalebar=y barlabel=Time barunit=s barreverse=y
    title="%s" label1=Half-Offset unit1=km label2=Midpoint unit2=km
    ''' % title
# Plot offset-time data
def hoplot(title):
    return'''
    transp plane=12 |
    grey gainpanel=a label1=Time unit1=s label2=Half-offset unit2=km title="%s"
    '''% title

# Parameters

# estimated travel time
t0 = 1.345

# midpoint involved
dx=0.1



# Reflector
Flow('reflector',None,
     '''
     spike mag=2 nsp=1 o1=-5 d1=0.01 n1=1251
     ''')
Plot('reflector',
     '''
     graph min2=0 max2=4.5 min1=0 max1=10
     yreverse=y plotcol=7 plotfat=10
     wantaxis=n wanttitle=n scalebar=y pad=n
     ''')

# Velocity
Flow('vel',None,
     '''
     spike mag=2 nsp=1 o1=0 d1=0.01 n1=451 o2=0 d2=0.01 n2=1001
     ''')
Plot('vel',
     '''
     grey color=i allpos=y bias=2 scalebar=y wanttitle=n
     barreverse=y barlabel=Velocity barunit=km/s
     ''')
Result('reflector','vel reflector','Overlay')


# Data (cmp)
Flow('data','reflector',
     '''
     kirmod cmp=y 
     nh=161 dh=0.025 h0=0
     ns=401 ds=0.025 s0=0
     freq=10 dt=0.004 nt=1001
     vel=2 verb=y |
     put d2=0.0125 
     ''')

# Plot data (cmp)
Result('data',
       '''
       byte |
       transp plane=23 |
       grey3 flat=y frame1=500 frame3=0 frame2=200
       label1=Time unit1=s 
       label3=Half-Offset unit3=km 
       label2=Midpoint unit2=km
       title=Data point1=0.8 point2=0.8 
       ''')

Plot('data',
       '''
       byte |
       transp plane=23 memsize=1000 |
       grey3 flat=y frame1=500 frame3=0 frame2=200
       label1=Time unit1=s 
       label3=Half-Offset unit3=km 
       label2=Midpoint unit2=km
       title=Data point1=0.8 point2=0.8 
       ''')

# Pick traveltime
Flow('pick1','data','envelope | max1 | window f1=0 n1=1 | real')
Plot('pick1',gplot(5))

Flow('pick2','data','envelope | max1 | window f1=1 n1=1 | real')
Plot('pick2',gplot(5))

# Plot pick
Result('pick1',tplot('Traveltime'))
Result('pick2',tplot('Traveltime'))

Result('datapick1','data pick1','Overlay')
Result('datapick2','data pick2','Overlay')


# Initail crs parameters
Flow('zero',None,'spike n1=4 k1=1 mag=%g' % t0)

# We only have one reflector underground, so we just pick first 2nd travel time.
# Loop travel time
for p0 in range(1,3):

    # dm is 0.1, so the number of midpoint nearby is 4.
    # Loop midpoint
    for xx0 in range(4,397,1):
        x0=xx0*0.025 
        datax='Pick%d-data%d' %(p0,xx0)
        weight='Pick%d-weight%d' %(p0,xx0)
        Flow(weight,'pick%d' %p0,'math output=1/input | cut min2=%g | cut max2=%g | cut min1=%g' % (x0+dx,x0-dx,dx))
        Plot(datax,'data',kplot(x0))
        coef = 'zero'

        # Newton literation
        for iter in range(20):
            time = 'pick%d-time%d-%d'% (p0,iter,xx0)
            fit = 'pick%d-fit%d-%d' % (p0,iter,xx0)
    
            Flow([time,fit],['pick%d' %p0,coef],
                 '''
                 mffit coef=${SOURCES[1]} fit=${TARGETS[1]}
                 type=%s x0=%g
                 ''' % ('crs',x0))
    
            match = 'pick%d-match%d-%d'% (p0,iter,xx0)
            coef2 = 'pick%d-coef%d-%d'% (p0,iter,xx0)

            Flow('d'+coef2,['pick%d' %p0,time,fit,weight],
                 '''
                 add mode=p ${SOURCES[0]} |
                 add scale=1,-1 ${SOURCES[1]} |
                 lsfit coef=$TARGET fit=${SOURCES[2]} weight=${SOURCES[3]}
                 ''',stdout=0)
            Flow(coef2,['d'+coef2,coef],'add ${SOURCES[1]}')
     
            coef = coef2

        # Calculate the coef
        
        # Approximation Travel Time
        Flow('pick%d-mid%d-tn' %(p0,xx0),coef,'window f1=0 n1=1')
        # A2
        Flow('pick%d-mid%d-a2' %(p0,xx0),coef,'window f1=2 n1=1')
        # A3
        Flow('pick%d-mid%d-a3' %(p0,xx0),coef,'window f1=3 n1=1')
        # Tf (Criterion)
        Flow('pick%d-mid%d-criterion' %(p0,xx0),['pick%d-mid%d-a2' %(p0,xx0),'pick%d-mid%d-a3' %(p0,xx0)],
             '''
             math xx1=${SOURCES[0]} xx2=${SOURCES[1]} output="exp(-abs(xx2-xx1)/abs(xx2+xx1))"
             ''')

        # traveltime calculated by CRS
        fit = 'pick%d-fit%d' % (p0,xx0)
        Flow(fit,time,'math output="sqrt(input)" ')  
        Plot(fit+'g',fit,gplot(x0))
        Result('pick%d-data%d' % (p0,xx0),[datax,fit+'g'],'Overlay')
	
        # original data at midpoint xx0
	Flow('pick%d-mid%d-oridata' %(p0,xx0),'data.rsf',
	'''
	transp plane=12 |
	window f3=%d n3=1
	''' %xx0)
	# picktime at midpoint xx0
	Flow('pick%d-mid%d-picktime' %(p0,xx0),'pick%d.rsf' %p0,
	'''
	transp plane=23 |
	window f3=%d n3=1
	''' %xx0)
	# Extract data based on TF
        Flow('pick%d-mid%d-Extractdata' %(p0,xx0),['pick%d-mid%d-oridata' %(p0,xx0),'pick%d-mid%d-picktime' %(p0,xx0),'pick%d-mid%d-criterion' %(p0,xx0),'Extract.x'],
        '''
        ./Extract.x
        pick=${SOURCES[1]}
	cri=${SOURCES[2]}
        k=25
        ''') 

	Result('pick%d-mid%d-oridata' %(p0,xx0),hoplot('Original Data'))
	Result('pick%d-mid%d-Extractdata' %(p0,xx0),hoplot('Extracted Data'))

    # We merge all the Tf and Extracted Data into one matrix, separately
    Flow('pick%d-midsum4-tn' %p0,'pick%d-mid4-tn' %p0,'cp')
    Flow('pick%d-midsum4-criterion' %p0,'pick%d-mid4-criterion' %p0,'cp')
    Flow('pick%d-midsum4-Extractdata' %p0,'pick%d-mid4-Extractdata' %p0,'cp')
    for yy0 in range(5,397,1):
        Flow('pick%d-midsum%d-tn' %(p0,yy0),['pick%d-midsum%d-tn' %(p0,yy0-1),'pick%d-mid%d-tn' %(p0,yy0)],'cat axis=1 ${SOURCES[1]}')
        Flow('pick%d-midsum%d-criterion' %(p0,yy0),['pick%d-midsum%d-criterion' %(p0,yy0-1),'pick%d-mid%d-criterion' %(p0,yy0)],'cat axis=1 ${SOURCES[1]}')  
        Flow('pick%d-midsum%d-Extractdata' %(p0,yy0),['pick%d-midsum%d-Extractdata' %(p0,yy0-1),'pick%d-mid%d-Extractdata' %(p0,yy0)],'cat axis=3 ${SOURCES[1]}')  

# Add the extracted data from pick1 and pick2
Flow('DiffractionData',['pick1-midsum396-Extractdata','pick2-midsum396-Extractdata'],
     '''
     add ${SOURCES[1]} |
     transp plane=12
     ''')

for p0 in range(1,3):
    Flow('CRSpar%d' %p0,['pick%d-midsum396-criterion' %p0,'pick%d-midsum396-tn' %p0,'Mcrspara.x'],
         '''
         ./Mcrspara.x
         pick=${SOURCES[1]}
         nt=1501
         dt=0.004
         dc=0.025
         ''')
# Add the CRSparameters from pick1 and pick2
Flow('CRSpar',['CRSpar1','CRSpar2'],
     '''
     add ${SOURCES[1]}
     ''')

Result('DiffractionData',
       '''
       byte |
       transp plane=23 |
       grey3 flat=y frame1=500 frame3=0 frame2=196
       label1=Time unit1=s 
       label3=Half-Offset unit3=km 
       label2=Midpoint unit2=km
       title=Data point1=0.8 point2=0.8 
       ''')

Result('CRSpar',
       '''
       window n2=1001 |
       transp |
       grey gainpanel=a bias=0.5 minval=0 maxval=1 color=H scalebar=y
       ''')

End()






































